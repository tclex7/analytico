<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Analytico Hub</title>
    <link>/post/</link>
    <description>Recent content in Posts on Analytico Hub</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>My Name</copyright>
    <lastBuildDate>Sun, 30 May 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Analyzing a column with unique, n_distinct, and data.table</title>
      <link>/2021/05/30/2021-05-30-analyzing-a-column-with-unique-n-distinct-and-data-table/</link>
      <pubDate>Sun, 30 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/2021/05/30/2021-05-30-analyzing-a-column-with-unique-n-distinct-and-data-table/</guid>
      <description>The tutorial will show you how to analyze a column in different ways.
Lets bring in a sample dataset.
data(&amp;quot;iris&amp;quot;) head(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa Lets look at the unique species names.</description>
    </item>
    
    <item>
      <title>Convert Date to a Fiscal Year in R</title>
      <link>/2021/05/29/2021-05-29-convert-date-to-a-fiscal-year-in-r/</link>
      <pubDate>Sat, 29 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/2021/05/29/2021-05-29-convert-date-to-a-fiscal-year-in-r/</guid>
      <description>You will need tidyverse and lubidate package.
if(!require(tidyverse)) install.packages(&amp;quot;tidyverse&amp;quot;, repos = &amp;quot;http://cran.us.r-project.org&amp;quot;) if(!require(lubridate)) install.packages(&amp;quot;lubridate&amp;quot;, repos = &amp;quot;http://cran.us.r-project.org&amp;quot;) Using sample dates use fiscal_state function. It will only work for quarter, and not for year.
x &amp;lt;- ymd(c(&amp;quot;2009-04-01&amp;quot;, &amp;quot;2011-06-03&amp;quot;, &amp;quot;2007-10-02&amp;quot;, &amp;quot;2012-12-25&amp;quot;)) quarter &amp;lt;- quarter(x, with_year = TRUE, fiscal_start = 9) print(quarter) ## [1] 2009.3 2011.4 2008.1 2012.2 Now you can use str_sub to pull the fiscal year only.
fiscal_year &amp;lt;- stringr::str_sub(quarter, 1, 4) print(fiscal_year) ## [1] &amp;quot;2009&amp;quot; &amp;quot;2011&amp;quot; &amp;quot;2008&amp;quot; &amp;quot;2012&amp;quot; Putting it all together in a table</description>
    </item>
    
    <item>
      <title>Export Multiple Tables to Excel</title>
      <link>/2021/05/29/2021-05-29-export-multiple-tables-to-excel/</link>
      <pubDate>Sat, 29 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/2021/05/29/2021-05-29-export-multiple-tables-to-excel/</guid>
      <description>Get open xlsx package
if(!require(openxlsx)) install.packages(&amp;quot;openxlsx&amp;quot;, repos = &amp;quot;http://cran.us.r-project.org&amp;quot;) ## Loading required package: openxlsx Get 3 sample datasets to write into 1 excel document. 1 dataset per excel tab.
data(&amp;quot;faithful&amp;quot;) head(faithful) ## eruptions waiting ## 1 3.600 79 ## 2 1.800 54 ## 3 3.333 74 ## 4 2.283 62 ## 5 4.533 85 ## 6 2.883 55 data(&amp;quot;iris&amp;quot;) head(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.</description>
    </item>
    
    <item>
      <title>Analyze Zillow Housing Sale Prices by County</title>
      <link>/2020/06/06/2020-06-06-analyze-zillow-housing-sale-prices-by-county/</link>
      <pubDate>Sat, 06 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/06/06/2020-06-06-analyze-zillow-housing-sale-prices-by-county/</guid>
      <description>This script will assist in analyzing median home sales prices per county
if(!require(readr)) install.packages(&amp;quot;readr&amp;quot;, repos = &amp;quot;http://cran.us.r-project.org&amp;quot;) if(!require(dplyr)) install.packages(&amp;quot;dplyr&amp;quot;, repos = &amp;quot;http://cran.us.r-project.org&amp;quot;) if(!require(lubridate)) install.packages(&amp;quot;lubridate&amp;quot;, repos = &amp;quot;http://cran.us.r-project.org&amp;quot;) if(!require(tidyr)) install.packages(&amp;quot;tidyr&amp;quot;, repos = &amp;quot;http://cran.us.r-project.org&amp;quot;) if(!require(stringr)) install.packages(&amp;quot;stringr&amp;quot;, repos = &amp;quot;http://cran.us.r-project.org&amp;quot;) if(!require(ggplot2)) install.packages(&amp;quot;ggplot2&amp;quot;, repos = &amp;quot;http://cran.us.r-project.org&amp;quot;) if(!require(ggthemes)) install.packages(&amp;quot;ggthemes&amp;quot;, repos = &amp;quot;http://cran.us.r-project.org&amp;quot;) library(readr) library(dplyr) library(lubridate) library(tidyr) library(stringr) library(ggplot2) library(ggthemes) #Clear current enviornment rm(list = ls()) #Disable scientific notation options(scipen=999) Pull in data from https://www.zillow.com/research/data/</description>
    </item>
    
    <item>
      <title>Get Longitude and Latitude in R</title>
      <link>/2020/05/03/2020-05-03-get-longitude-and-latitude-in-r/</link>
      <pubDate>Sun, 03 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/05/03/2020-05-03-get-longitude-and-latitude-in-r/</guid>
      <description>This tutorial will show you how to retrieve longitude and latitude by simply providing an address.
You will start by installing RDSTK package from github using devtools. If you don’t have devtools, you will also need to install
devtools::install_github(&amp;quot;rtelmore/RDSTK&amp;quot;) Next we will call RDSTK package along with dplyr package
library(RDSTK) library(dplyr) We will use street2coordinates function to pull lat and long based on location.</description>
    </item>
    
    <item>
      <title>Covid-19 US County Visual in R</title>
      <link>/2020/04/10/2020-04-10-covid-19-us-county-visual-in-r/</link>
      <pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/04/10/2020-04-10-covid-19-us-county-visual-in-r/</guid>
      <description>This tutorial will pull Covid-19 virus data by US County from New York Times.
Make sure correct packages are installed
if(!require(readr)) install.packages(&amp;quot;readr&amp;quot;, repos = &amp;quot;http://cran.us.r-project.org&amp;quot;) if(!require(dplyr)) install.packages(&amp;quot;dplyr&amp;quot;, repos = &amp;quot;http://cran.us.r-project.org&amp;quot;) if(!require(ggplot2)) install.packages(&amp;quot;ggplot2&amp;quot;, repos = &amp;quot;http://cran.us.r-project.org&amp;quot;) Load packages
library(readr) library(dplyr) library(ggplot2) Read data into R
covid &amp;lt;- read_csv(&amp;#39;https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv&amp;#39;) Select my County, we will use Los Angeles as an example.
mycounty &amp;lt;- &amp;#39;Los Angeles&amp;#39; Check make sure Los Angeles is part of the dataset, this will be a true or false.</description>
    </item>
    
    <item>
      <title>Replace Strings in R using str_replace</title>
      <link>/2020/03/21/2020-03-21-replace-strings-in-r-using-str-replace/</link>
      <pubDate>Sat, 21 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/03/21/2020-03-21-replace-strings-in-r-using-str-replace/</guid>
      <description>Replace Strings in R using str_replace 3rd party packages
library(stringr) library(readr) library(dplyr) Read in Data
head(df) ## # A tibble: 6 x 4 ## id dateAdded dateUpdated address ## &amp;lt;chr&amp;gt; &amp;lt;dttm&amp;gt; &amp;lt;dttm&amp;gt; &amp;lt;chr&amp;gt; ## 1 AVwc252WIN2L1WUfpqLP 2016-10-30 21:42:42 2018-09-10 21:06:27 5921 Valencia Cir ## 2 AVwc252WIN2L1WUfpqLP 2016-10-30 21:42:42 2018-09-10 21:06:27 5921 Valencia Cir ## 3 AVwc252WIN2L1WUfpqLP 2016-10-30 21:42:42 2018-09-10 21:06:27 5921 Valencia Cir ## 4 AVwdOclqIN2L1WUfti38 2015-11-28 19:19:35 2018-09-10 21:06:16 7520 Teague Rd ## 5 AVwdOclqIN2L1WUfti38 2015-11-28 19:19:35 2018-09-10 21:06:16 7520 Teague Rd ## 6 AVwdOclqIN2L1WUfti38 2015-11-28 19:19:35 2018-09-10 21:06:16 7520 Teague Rd Replace the first pattern in a single column</description>
    </item>
    
    <item>
      <title>Webscrape CDC Website with Python</title>
      <link>/2020/03/18/2020-03-18-webscrape-cdc-website-with-python/</link>
      <pubDate>Wed, 18 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/03/18/2020-03-18-webscrape-cdc-website-with-python/</guid>
      <description>Web Scraping CDC Website using lxml Note: The website URL has changed a couple times during the last month, you will have to update the url as well.
Import 3rd party packages. Use pip if you don’t have them already installed.
import requests import datetime from lxml import html # url to scrape data from url = &amp;#39;https://www.cdc.gov/coronavirus/2019-ncov/cases-updates/cases-in-us.html&amp;#39; # path to particular element path = &amp;#39;/html/body/div[7]/main/div[3]/div/div[3]/div[2]/div/div[1]/div/div[2]/ul&amp;#39; # get response object response = requests.</description>
    </item>
    
    <item>
      <title>Fantasy Football Analysis VLOOKUP in R</title>
      <link>/2020/03/17/2020-03-17-fantasy-football-analysis-vlookup-in-r/</link>
      <pubDate>Tue, 17 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/03/17/2020-03-17-fantasy-football-analysis-vlookup-in-r/</guid>
      <description>Packages used:
library(dplyr)
library(readxl)
library(ggplot2)
Data source: https://fantasydata.com/, uses non-ppr standard fantasy scoring
Read in Alvin Kamara and Mark Ingram 2018 data, both data sets are in same excel sheets but in different tabs. Kamara is on sheet 3 and Ingram on sheet 4. Use readxl package, and read_excel() function.
Kamara &amp;lt;- read_excel(akamara , sheet = 3) Mark_Ingram &amp;lt;- read_excel(mingram, sheet = 4) Using dplyr package filter games where A.</description>
    </item>
    
  </channel>
</rss>